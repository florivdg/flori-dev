---
import { getCollection } from 'astro:content'
import Image from '../../components/reads/Image.astro'
import TagList from '../../components/reads/TagList.astro'
import Layout from '../../layouts/Layout.astro'
import BoxedContent from '../../components/BoxedContent.astro'
import FluidContent from '../../components/FluidContent.astro'
import { formatDate } from '../../utils/formatters'
import type { SEOData } from '../../types/SEO'

/// Page title
const title = 'Reads'

/// OpenGraph meta tags data
const seo: SEOData = {
  head: {
    title,
    description: "This is not a blog. It's documentation!",
  },
  og: {
    type: 'website',
  },
}

const reads = (
  await getCollection('reads', ({ data }) => {
    return import.meta.env.PROD ? data.draft !== true : true
  })
).sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
---

<Layout seo={seo}>
  <main>
    <BoxedContent>
      <h1 class="mb-6 text-4xl font-black">
        <span class="font-light line-through" aria-hidden="true">Blog</span>
        Reads
      </h1>
      <p class="mb-4 text-xl font-semibold">
        <span class="highlight">tl;dr</span> This is not a blog. It's documentation!
      </p>

      <p class="mb-12 text-xl">
        Welcome to my not-a-blog. It's definitely not a blog, because blogs are
        for rambling and ranting, and this is purely <span class="highlight"
          >documentation</span
        >. Okay, maybe there will be a little bit of rambling, but only in the
        name of thoroughness.
      </p>
    </BoxedContent>

    <FluidContent>
      <ul class="grid grid-cols-1 gap-10 lg:grid-cols-2">
        {
          reads.map((entry, i) => (
            <li class="flex -rotate-[0.1deg] -skew-x-[0.5deg] rounded-lg shadow-xl shadow-slate-700/10 transition-transform duration-150 hover:motion-safe:rotate-[0.5deg] dark:shadow-slate-950/20">
              <a
                href={`/reads/${entry.slug}`}
                class="group flex w-full flex-col overflow-hidden rounded-lg"
              >
                {entry.data.image ? (
                  <Image
                    src={entry.data.image?.src}
                    alt={entry.data.image?.alt}
                    skew={false}
                    lazy={i >= 2}
                  />
                ) : undefined}

                <div class="flex flex-1 flex-col bg-slate-50 p-8 transition-colors duration-150 ease-in-out group-hover:bg-slate-200 dark:bg-slate-700 dark:group-hover:bg-slate-900">
                  <time
                    datetime={entry.data.pubDate.toISOString()}
                    class="mb-3 inline-block text-xs font-semibold text-slate-500 dark:text-slate-300"
                  >
                    {formatDate(entry.data.pubDate)}
                  </time>

                  <h2 class="hyphens-auto text-3xl font-bold [text-wrap:balance]">
                    {entry.data.title}
                  </h2>

                  {entry.data.description ? (
                    <p class="mt-6 text-xl">{entry.data.description}</p>
                  ) : undefined}

                  <div class="mt-auto pt-6">
                    <TagList tags={entry.data.tags} />
                  </div>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </FluidContent>
  </main>
</Layout>
