---
import { getCollection } from 'astro:content'
import { getImage } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import type { SEOData } from '../../types/SEO'
import BasicLayout from '../../layouts/Basic.astro'
import BoxedContent from '../../components/BoxedContent.astro'
import Photograph from '../../components/Photograph.vue'

export async function getStaticPaths() {
  const gridEntries = await getCollection('grid')
  const sortedEntries = gridEntries.sort((a, b) => {
    const dateComparison = b.data.date.getTime() - a.data.date.getTime()
    if (dateComparison === 0) {
      return b.id.localeCompare(a.id)
    }
    return dateComparison
  })

  return sortedEntries.map((entry, i) => {
    const props = {
      entry,
      prev: sortedEntries[i - 1],
      next: sortedEntries[i + 1],
    }

    return {
      params: { id: entry.id },
      props,
    }
  })
}

interface Props {
  entry: CollectionEntry<'grid'>
  prev?: CollectionEntry<'grid'>
  next?: CollectionEntry<'grid'>
}

const { entry, prev, next } = Astro.props

/// Page title
const title = entry.data.title

/// OpenGraph meta tags data
const seo: SEOData = {
  head: {
    title,
    description: entry.data.alt,
  },
  og: {
    image: entry.data.image,
    type: 'article',
  },
}

/**
 * Generate an optimized version of the image.
 */
const optimizedImage = await getImage({
  src: entry.data.image,
  format: 'webp',
  quality: 'high',
  width: entry.data.image.width > entry.data.image.height ? 1800 : undefined,
  height: entry.data.image.width > entry.data.image.height ? undefined : 1800,
  densities: [1, 2],
})
---

<BasicLayout seo={seo}>
  <main>
    <BoxedContent>
      <Photograph
        entry={entry}
        optimizedImage={optimizedImage}
        prevId={prev?.id}
        nextId={next?.id}
        client:load
      />
    </BoxedContent>
  </main>

  <style>
    body {
      overflow: hidden;
    }
  </style>
</BasicLayout>
