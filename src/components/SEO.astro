---
import { getImage } from 'astro:assets'
import type { SEOData } from '../types/SEO'

export interface Props {
  seo: SEOData
}

const { seo } = Astro.props
const { head, og } = seo

/// Use a fallback image if no image is provided
import fallbackOgImage from '/public/og-image.jpg'
let ogImage = fallbackOgImage.src

if (og.image) {
  /// Get scaled and cropped image src
  const { src } = await getImage({
    src: og.image,
    alt: og.title ?? head.title,
    width: 1200,
    height: 630,
    format: 'jpg',
    fit: 'cover',
    quality: 70,
  })

  /// Set ogImage to the image path
  ogImage = src ?? ogImage
}

/// Prepend Vercel URL to og:image
if (import.meta.env.PUBLIC_URL) {
  ogImage = `https://${import.meta.env.PUBLIC_URL}${ogImage}`
}

/// Title template with site name
const siteName = 'flori.dev'
const currentPath = new URL(Astro.request.url).pathname
const pageTitle = currentPath === '/' ? head.title : `${head.title} | flori.dev`
---

<meta name="description" content={head.description} />
<title>{pageTitle}</title>
<meta property="og:title" content={og.title ?? head.title} />
<meta property="og:type" content={og.type} />
<meta property="og:image" content={ogImage} />
<meta property="og:description" content={og.description ?? head.description} />
<meta property="og:site_name" content={siteName} />
